const { BadRequest, Unauthentication } = require("../errors")
const jwt = require('jsonwebtoken')
require('dotenv').config()

const login = async (req, res, next) => {
    const { username, password } = req.body
    if (!username || !password) {
        //   return next({ msg: "please provide both password and username", statusCode: 400 })
        return next(new BadRequest('Please provide email and password'))

    }
    //for demo, normally generated by db!!
    const id = new Date().getDate()
    //just for demo, in production use long unguessable string
    const token = jwt.sign({ id, username }, process.env.JWT_SECRET, { expiresIn: '30d' })
    res.status(200).json({ msg: 'user created!', token: token })
}

const dashboard = async (req, res, next) => {
    //get token from headers 
    const authHeader = req.headers.authorization
    //check of it starts with jwt syntax and exists or not
    if (!authHeader || !authHeader.startsWith('Bearer')) {
        return next(new Unauthentication('no token provided'))

    }
    //spliting the token
    const token = authHeader.split(' ')[1]
    try {
        //checking if its mathes with user
        const decoded = jwt.verify(token, process.env.JWT_SECRET)
        console.log(decoded)
        const luckyNumber = Math.floor(Math.random() * 100)
        res.status(200).json({ msg: `Hello ${ decoded.username }`, secret: ` here is your authroized data '${ token }', your lucky number is ${ luckyNumber }` })
    } catch (error) {
        return next(new Unauthentication('not authorize to access this route'))

    }
}

module.exports = { login, dashboard }